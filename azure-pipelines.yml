trigger:
- '*' 

variables:
- group: choosy-env-variables

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: '18.x'

- task: Cache@2
  displayName: 'Cache npm (root lockfile)'
  inputs:
    key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package-lock.json'
    restoreKeys: |
      npm | "$(Agent.OS)"
      npm
    path: '$(Pipeline.Workspace)/npm-cache'

- script: |
    npm config set cache $(Pipeline.Workspace)/npm-cache --global
  displayName: 'Configure npm cache'

- script: |
    echo "VITE_BACKEND_URL=$(VITE_BACKEND_URL)" > .env.production
    echo "VITE_CLOUDINARY_NAME=$(VITE_CLOUDINARY_NAME)" >> .env.production
    echo "VITE_CLOUDINARY_PRESET=$(VITE_CLOUDINARY_PRESET)" >> .env.production
    npm ci
    npm run build
  displayName: 'Install deps & build (Vite at repo root)'
  env:
    VITE_BACKEND_URL: $(VITE_BACKEND_URL)
    VITE_CLOUDINARY_NAME: $(VITE_CLOUDINARY_NAME)
    VITE_CLOUDINARY_PRESET: $(VITE_CLOUDINARY_PRESET)

- script: |
    npx vitest run --coverage
  displayName: 'Run unit tests with Vitest'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/junit.xml'
    testResultsFormat: 'JUnit'
  condition: succeededOrFailed()
  displayName: 'Publish test results'

- task: PublishCodeCoverageResults@2
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: 'coverage/cobertura-coverage.xml'
    reportDirectory: 'coverage'
  condition: succeededOrFailed()
  displayName: 'Publish code coverage'

- task: PublishBuildArtifacts@1
  displayName: 'Publish dist as artifact'
  inputs:
    PathtoPublish: 'dist'
    ArtifactName: 'static'
    publishLocation: 'Container'

- task: ArchiveFiles@2
  displayName: 'Archive frontend build for deployment'
  inputs:
    rootFolderOrFile: 'dist'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
    replaceExistingArchive: true

- task: AzureWebApp@1
  displayName: 'Deploy React/Vite app to Azure App Service'
  inputs:
    azureSubscription: 'choosy-connection'
    appType: 'webAppLinux'
    appName: 'choosy'
    package: '$(Build.ArtifactStagingDirectory)/frontend.zip'
    runtimeStack: 'NODE|18-lts'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
